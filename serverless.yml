#aws product design app apis
#version 1.0.0

service: aws-expenses-traker-v1
provider:
  name: aws
  runtime: nodejs14.x  
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-south-1
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            # - dynamodb:PostTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["Users", "Arn"] } 
            - { "Fn::GetAtt": ["Expenses", "Arn"] } 
            # Resource: !GetAtt PostTable.Arn
  environment:
    USERS_TABLE: ${self:service}-users # table for user data
    EXPENSES_TABLE: ${self:service}-expenses # table for expenses data

custom:
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
  serverless-offline:
    httpPort: 5000 # for api port
    resourceRoutes: true # http proxy


resources: # actual config for table
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table # serverless name of table
      Properties:
        TableName: ${self:service}-users # s3 table name
        AttributeDefinitions:
          - AttributeName: email #field name
            AttributeType: S # users id will be string
        KeySchema: # it will generate key for users id
          - AttributeName: email
            KeyType: HASH # generate hast id for users id
        ProvisionedThroughput: # how much min you want to read and write data in table
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ExpensesTable:
      Type: AWS::DynamoDB::Table # serverless name of table
      Properties:
        TableName: ${self:service}-expenses # s3 table name
        AttributeDefinitions:
          - AttributeName: uuid #field name
            AttributeType: S # users id will be string
        KeySchema: # it will generate key for users id
          - AttributeName: uuid
            KeyType: HASH # generate hast id for users id
        ProvisionedThroughput: # how much min you want to read and write data in table
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1    

# commit when deploy on aws packagess
# plugins:
#   - serverless-dynamodb-local
#   - serverless-offline

functions:


################################################################
# user functions
################################################################

# user api schema
  signInUser:
      handler: src/usersApis.handler     
      name: signin-user # lambda function name
      description: this function to sign in
      timeout: 10 #sec to execute otherwise fail
      memorySize: 128 #it will take max size
      events:
        - http: # endpoint and params for api gatway
            path: user/signin
            method: post
            private: false
            cors: true

# create user
  signUpUser:
      handler: src/usersApis.handler     
      name: create-user # lambda function name
      description: this function to create new user 
      timeout: 10 #sec to execute otherwise fail
      memorySize: 128 #it will take max size
      events:
        - http: # endpoint and params for api gatway
            path: user/signup
            method: post
            private: false
            cors: true


################################################################
# expenses functions
################################################################

# add expenses
  addExpenses:
      handler: src/expensesApis.handler     
      name: add-expenses # 
      description: this function to add expenses 
      timeout: 10 #sec to execute otherwise fail
      memorySize: 128 #it will take max size
      events:
        - http: # endpoint and params for api gatway
            path: add/expenses
            method: post
            private: true
            cors: true


# get all expenses
  getAllIndivisualExpenses:
      handler: src/expensesApis.handler     
      name: get-all-expenses # 
      description: this function to get all expenses 
      timeout: 10 #sec to execute otherwise fail
      memorySize: 128 #it will take max size
      events:
        - http: # endpoint and params for api gatway
            path: get/expenses
            method: get
            private: true
            cors: true


# get all/indivisual expenses
  getIndivisualExpenses:
      handler: src/expensesApis.handler     
      name: get-indivisual-expenses # 
      description: this function to get spacific expenses by its uuid 
      timeout: 10 #sec to execute otherwise fail
      memorySize: 128 #it will take max size
      events:
        - http: # endpoint and params for api gatway
            path: get/expenses/{uuid}
            method: get
            private: true
            cors: true


# delete indivisual expenses
  deleteIndivisualExpenses:
      handler: src/expensesApis.handler     
      name: delete-indivisual-expenses # 
      description: this function to delete spacific expenses by its uuid 
      timeout: 10 #sec to execute otherwise fail
      memorySize: 128 #it will take max size
      events:
        - http: # endpoint and params for api gatway
            path: delete/expenses/{uuid}
            method: delete
            private: true
            cors: true